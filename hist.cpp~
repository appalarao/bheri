#include<iostream>
#include<stack>
using namespace std;
 
int getMaxArea(int hist[], int n)
{
    stack<int> s;
 
    int max_area = 0; 
    int tp;  
    int area_with_top;
 
    int i = 0;
    while (i < n)
    {
        // If this bar is higher than the bar on top stack, push it to stack
        if (s.empty() || hist[i]>=hist[s.top()])
            s.push(i++);
 
        // If this bar is lower than top of stack, then calculate area of rectangle 
        // with stack top as the smallest (or minimum height) bar. 'i' is 
        // 'right index' for the top and element before top in stack is 'left index'
        else
        {
            tp = s.top();  // store the top index
            s.pop();  // pop the top
 
            // Calculate the area with hist[tp] stack as smallest bar
            area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);
 cout<<"\narea with top is "<<area_with_top<<endl;
            // update max area, if needed
            if (max_area < area_with_top)
                max_area = area_with_top;

// cout<<"\nmax area is "<<max_area<<endl;
        }
    }
 
    // Now pop the remaining bars from stack and calculate area with every
    // popped bar as the smallest bar
	cout<<"\n\n\n===========coming in new area==========\n\n\n";
	while (s.empty() == false)
    {
        tp = s.top();
        s.pop();
        area_with_top = hist[tp] * (s.empty() ? i : i - s.top() - 1);
 
// cout<<"\narea with top is "<<area_with_top<<endl;
            // update max area, if needed
        if (max_area < area_with_top)
            max_area = area_with_top;
 //cout<<"\nmax area is "<<max_area<<endl;
    }
//    }
 
    return max_area;
}
 
// Driver program to test above function
int main()
{
    int hist[] = {6, 2, 5, 4, 5, 1, 6};
    //int hist[] = {5,5,7,6};
    int n = sizeof(hist)/sizeof(hist[0]);
    cout << "Maximum area is " << getMaxArea(hist, n)<<endl;
    return 0;
}
